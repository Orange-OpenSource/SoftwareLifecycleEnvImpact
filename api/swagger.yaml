swagger: "2.0"
info:
  description: "API to model a software lifecycle development and its environmental impacts."
  version: "0.1.0"
  title: "Software environmental impact"

basePath: /api/v1

paths:
  /projects:
    get:
      operationId: api.routes.project.get_projects
      tags:
        - Project
      summary: Get all projects
      responses:
        200:
          description: list of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'

    post:
      operationId: api.routes.project.create_project
      tags:
        - Project
      summary: Create a new project
      parameters:
        - name: project
          in: body
          description: project to create
          required: True
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the project
      responses:
        201:
          description: Successfully created project
          schema:
            $ref: '#/definitions/Project'
        409:
          description: Project exists already

  /projects/{project_id}:
    get:
      operationId: api.routes.project.get_project
      tags:
        - Project
      summary: Read one project
      description: Read one project
      parameters:
        - name: project_id
          in: path
          description: Id of the project to get
          type: integer
          required: true
      responses:
        200:
          description: Successfully read project
          schema:
            $ref: '#/definitions/Project'
        404:
          description: No project found with this id

  /projects/{project_id}/models:
    get:
      operationId: api.routes.project.get_models
      tags:
        - Project
        - Model
      summary: Get all models for a project
      parameters:
        - name: project_id
          in: path
          description: Id of the project you want to get the models
          type: integer
          required: true
      responses:
        200:
          description: Successfully read models for the project
          schema:
            type: array
            items:
              $ref: '#/definitions/Model'
        404:
          description: No project found with this id

  /models:
    get:
      operationId: api.routes.model.get_models
      tags:
        - Model
      summary: Get all models
      responses:
        200:
          description: list of models
          schema:
            type: array
            items:
              $ref: '#/definitions/Model'

    post:
      operationId: api.routes.model.create_model
      tags:
        - Model
      description: Create a new model
      parameters:
        - name: model
          in: body
          description: Model to create
          required: True
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the model
              project_id:
                type: integer
                description: Id of the related project
      responses:
        201:
          description: Successfully created model
          schema:
            $ref: '#/definitions/Model'
        409:
          description: Model exists already

  /models/{model_id}:
    get:
      operationId: api.routes.model.get_model
      tags:
        - Model
      summary: Read one model
      description: Read one model
      parameters:
        - name: model_id
          in: path
          description: Id of the model to get
          type: integer
          required: true
      responses:
        200:
          description: Successfully read model
          schema:
            $ref: '#/definitions/Model'
        404:
          description: No model found with this id

  /models/{model_id}/tasks:
    get:
      operationId: api.routes.model.get_tasks
      tags:
        - Model
        - Task
      summary: Get all tasks for a model
      parameters:
        - name: model_id
          in: path
          description: Id of the model to get the tasks from
          type: integer
          required: true
      responses:
        200:
          description: List of tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        404:
          description: No model found with this id

  /tasks:
    get:
      operationId: api.routes.task.get_tasks
      tags:
        - Task
      summary: Get all tasks
      responses:
        200:
          description: List of tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'

    post:
      operationId: api.routes.task.create_task
      tags:
        - Task
      description: Create a new task
      parameters:
        - name: task
          in: body
          description: Task to create
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the task
              parent_task_id:
                type: integer
                description: Optional parent task id
              task_type_id:
                type: integer
                description: Id of the TaskType
              model_id:
                type: integer
                description: Id of the related Model
      responses:
        201:
          description: Sucessfully created Task
          schema:
            $ref: '#/definitions/Task'
        409:
          description: Task exists already

  /tasks/{task_id}:
    get:
      operationId: api.routes.task.get_task
      tags:
        - Task
      summary: Read one task
      description: Read one task
      parameters:
        - name: task_id
          in: path
          description: Id of the task to get
          type: integer
          required: true
      responses:
        200:
          description: Sucessfully read task
          schema:
            $ref: '#/definitions/Task'
        404:
          description: No task found with this id

  /tasktypes:
    get:
      operationId: api.routes.task_type.get_task_types
      tags:
        - TaskType
      summary: Get all task types
      responses:
        200:
          description: List of task types
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskType'

  /tasktypes/{task_type_id}:
    get:
      operationId: api.routes.task_type.get_task_type
      tags:
        - TaskType
      summary: Read one task type
      description: Read one task type
      parameters:
        - name: task_type_id
          in: path
          description: Id of the task type to get
          type: integer
          required: true
      responses:
        200:
          description: Sucessfully read task type
          schema:
            $ref: '#/definitions/TaskType'
        404:
          description: No task type found with this id

  /taskinputs:
    get:
      operationId: api.routes.task_input.get_task_inputs
      tags:
        - TaskInput
      summary: Get all task inputs
      responses:
        200:
          description: List of task inputs
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskInput'

  /taskinputs/{task_input_id}:
    get:
      operationId: api.routes.task_input.get_task_input
      tags:
        - TaskInput
      summary: Read one task input
      description: Read one task input
      parameters:
        - name: task_input_id
          in: path
          description: Id of the task input to get
          type: integer
          required: true
      responses:
        200:
          description: Sucessfully read task input
          schema:
            $ref: '#/definitions/TaskInput'
        404:
          description: No task input found with this id

  /debug/reset:
    get:
      summary: Debug function to reset the database
      operationId: api.utils.build_database.reset_db
      responses:
        200:
          description: Database reset status

definitions:
    Project:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: Name of the project
        models:
          type: array
          items:
            $ref: '#/definitions/Model'
          description: List of the project models

    Model:
      type: object
      required:
        - name
        - project_id
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: Name of the model

    Task:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: Name of the task
        inputs:
          type: array
          items:
            $ref: '#/definitions/TaskInput'
          description: Inputs associated to the task
        subtasks:
          type: array
          items:
            $ref: '#/definitions/Task'
          description: Subtasks


    TaskType:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: Type of a task

    TaskInput:
      type: object
      required:
        - name
        - kind
        - task_id
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: Name of the task
        kind:
          type: string
          description: Kind of input
        value:
          type: integer
          description: TaskInput value
        task_id:
          type: integer
          description: id of the corresponding task
